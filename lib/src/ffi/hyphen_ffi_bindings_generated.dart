// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/hyphen_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class HyphenFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HyphenFfiBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HyphenFfiBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<HyphenDict$1> hyphen_load(ffi.Pointer<ffi.Char> filename) {
    return _hyphen_load(filename);
  }

  late final _hyphen_loadPtr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<HyphenDict$1> Function(ffi.Pointer<ffi.Char>)
    >
  >('hyphen_load');
  late final _hyphen_load =
      _hyphen_loadPtr
          .asFunction<
            ffi.Pointer<HyphenDict$1> Function(ffi.Pointer<ffi.Char>)
          >();

  void hyphen_free(ffi.Pointer<HyphenDict$1> dict) {
    return _hyphen_free(dict);
  }

  late final _hyphen_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HyphenDict$1>)>>(
        'hyphen_free',
      );
  late final _hyphen_free =
      _hyphen_freePtr.asFunction<void Function(ffi.Pointer<HyphenDict$1>)>();

  int hyphen_hyphenate2(
    ffi.Pointer<HyphenDict$1> dict,
    ffi.Pointer<ffi.Char> word,
    int word_size,
    ffi.Pointer<ffi.Char> hyphens,
  ) {
    return _hyphen_hyphenate2(dict, word, word_size, hyphens);
  }

  late final _hyphen_hyphenate2Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<HyphenDict$1>,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('hyphen_hyphenate2');
  late final _hyphen_hyphenate2 =
      _hyphen_hyphenate2Ptr
          .asFunction<
            int Function(
              ffi.Pointer<HyphenDict$1>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
            )
          >();

  int hyphen_hyphenate3(
    ffi.Pointer<HyphenDict$1> dict,
    ffi.Pointer<ffi.Char> word,
    int word_size,
    ffi.Pointer<ffi.Char> hyphens,
    int lhmin,
    int rhmin,
    int clhmin,
    int crhmin,
  ) {
    return _hyphen_hyphenate3(
      dict,
      word,
      word_size,
      hyphens,
      lhmin,
      rhmin,
      clhmin,
      crhmin,
    );
  }

  late final _hyphen_hyphenate3Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<HyphenDict$1>,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
      )
    >
  >('hyphen_hyphenate3');
  late final _hyphen_hyphenate3 =
      _hyphen_hyphenate3Ptr
          .asFunction<
            int Function(
              ffi.Pointer<HyphenDict$1>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
            )
          >();
}

final class _HyphenTrans extends ffi.Struct {
  @ffi.Char()
  external int ch;

  @ffi.Int()
  external int new_state;
}

typedef HyphenTrans = _HyphenTrans;

final class _HyphenState extends ffi.Struct {
  external ffi.Pointer<ffi.Char> match;

  external ffi.Pointer<ffi.Char> repl;

  @ffi.SignedChar()
  external int replindex;

  @ffi.SignedChar()
  external int replcut;

  @ffi.Int()
  external int fallback_state;

  @ffi.Int()
  external int num_trans;

  external ffi.Pointer<HyphenTrans> trans;
}

typedef HyphenState = _HyphenState;
typedef HyphenDict = _HyphenDict;

final class _HyphenDict extends ffi.Struct {
  @ffi.Char()
  external int lhmin;

  @ffi.Char()
  external int rhmin;

  @ffi.Char()
  external int clhmin;

  @ffi.Char()
  external int crhmin;

  external ffi.Pointer<ffi.Char> nohyphen;

  @ffi.Int()
  external int nohyphenl;

  @ffi.Int()
  external int num_states;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> cset;

  @ffi.Int()
  external int utf8;

  external ffi.Pointer<HyphenState> states;

  external ffi.Pointer<HyphenDict> nextlevel;
}

typedef HyphenDict$1 = _HyphenDict;
